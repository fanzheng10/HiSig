2422/206605
1194/135735
13/1305
123/8300
5/920
7330*5
41322*5
library(biomaRt)
mart<-useMart(biomart="ensembl", dataset="hsapiens_gene_ensembl")
listAttributes(ensembl, page = "feature_page")
listAttributes(mart, page = "feature_page")
results <-getBM(attributes = c("uniprotswissprot","hgnc_symbol"), filters = "hgnc_symbol", values = c("Q9BW60"), mart=mart)
View(results)
results <-getBM(attributes = c("uniprotswissprot","hgnc_symbol"), filters = "uniprotswissprot", values = c("Q9BW60"), mart=mart)
19035*19034/2
sqrt(19035*19034 +0.25)
5549-1987
0.344/0.39
561-193
303-63
368/240
240/181
13494/5549
13494/5549
5549/1313
303/70
70/1313
303/5549
584/13494
68/1406
287/7145
32/1313
181/5549
68/1313
279/5549
36
42/1313
200/5549
878/58358
891/22196
584/13494
615/22196
448/13494
339/5550
116/1680
1775/30989
1040/22197
695/13495
3779/54417
152/3028
116/1680
77/1314
1313/21938
1313/21638
2482/37457
339/5550
498/9437
333/5550
982/21638
523/13495
687/22197
47/37366
9/333
13/285
30/2745
17*16/2
-0.9*log(0.9)
-0.5*log(0.5)
sqrt(128778)
sqrt(128778*2)
pbinom(4,12,0.2)
-log(2/508)
-log(4/508)
4.84/5.53
-log(3/508)
5.13/5.53
4305+914
252+4967
2038-246
7606-2042
11756-7615
14164-11756
14292-14164
14303-14292
14486-14304
15030-14486
15123-15030
15146-15127
15210-15146
131219+86278
470*470*0.05
y1 = [125,115]
y1 = (125,115)
y1 = c(125,115,130)
y1 = c(125,115,130, 140, 140, 115,140,125,140,135)
y2 = c(110, 122, 125, 120,140,124,123,137,135,145)
wilcox.test(y1,y2)
wilcox.test(y1,y2, paired=TRUE)
wilcox.test(y1,y2, paired=TRUE,exact=FALSE,correct = FALSE)
wilcox.test(y1,y2, paired=TRUE,exact=FALSE,correct = FALSE, alt='greater')
wilcox.test(y1,y2, paired=TRUE,exact=FALSE,correct = FALSE, alt='smaller')
wilcox.test(y1,y2, paired=TRUE,exact=FALSE,correct = FALSE, alt='less')
408*0.03
13*26 - 27-72-16
223/26**2
26*2
26**2
15*9+12*12+16
13*26-295
43/26**2
2*63/26
12-4.84
7.16/26
?pbinom
pbinom(0:5,5,0.5)
pbinom(5,10,0.5)
pbinom(6,12,0.5)
pbinom(50,100,0.5)
pbinom(50,100,0.9)
pbinom(5,10,0.9)
pbinom(1,10,0.1)
pbinom(1,100,0.1)
pbinom(50,100,0.1)
pbinom(5,10,0.1)
pbinom(1, 10, pbinom(1,10, 0.1))
pbinom(1, 10, pbinom(5,10, 0.1))
pbinom(1, 100, pbinom(50,100, 0.1))
pbinom(1, 20, pbinom(10,20, 0.1))
pbinom(1, 20, pbinom(10,20, 0.2))
pbinom(1, 20, pbinom(10,20, 0.05))
pbinom(1, 20, pbinom(10,20, 0.3))
pbinom(1, 20, 1-pbinom(10,20, 0.3))
pbinom(1, 20, 1-pbinom(10,20, 0.1))
pbinom(1, 20, pbinom(10,20, 0.9))
pbinom(10,20, 0.9)
pbinom(5,10, 0.9)
pbinom(1, 5, pbinom(5,10, 0.9))
pbinom(1, 5, pbinom(5,10, 0.5))
pbinom(1, 5, pbinom(5,10, 0.7))
pbinom(1, 10, pbinom(5,10, 0.5))
pbinom(1, 10, pbinom(5,10, 0.6))
pbinom(1, 10, pbinom(5,10, 0.7))
pbinom(1, 20, pbinom(10,20, 0.5))
pbinom(1, 20, pbinom(10,20, 0.7))
pbinom(2, 20, pbinom(10,20, 0.7))
pbinom(1, 20, pbinom(10,20, 0.7))
pbinom(1, 20, pbinom(10,20, 0.6))
pbinom(1, 200, pbinom(100,200, 0.6))
pbinom(1, 200, pbinom(100,200, 0.7))
pbinom(1, 200, pbinom(100,200, 0.5))
?chisq.test
x <-matrix(c(2,2,2,2))
x <-matrix(c(2,2,2,2), ncol=2)
chisq.test(x)
x <-matrix(c(10,2,2,20), ncol=2)
chisq.test(matrix(c(10,2,2,20), ncol=2))
x <-matrix(c(10,1,1,10), ncol=2)
chisq.test(matrix(c(10,1,1,20), ncol=2))
chisq.test(matrix(c(10,1,1,10), ncol=2))
chisq.test(matrix(c(100,10,10,100), ncol=2))
chisq.test(matrix(c(100,10,100,1000), ncol=2))
chisq.test(matrix(c(100,10,1,10), ncol=2))
chisq.test(matrix(c(10,1,2,9), ncol=2))
chisq.test(matrix(c(10,1,20,90), ncol=2))
?pbinom()
pbinom(5,50, 0.5)
pbinom(45,50, 0.5)
pbinom(1,50, 0.5)
pbinom(1,50, 0.9)
pbinom(49,50, 0.9)
pbinom(499,500, 0.9)
pbinom(490,500, 0.9)
pbinom(400,500, 0.9)
pbinom(450,500, 0.9)
pbinom(475,500, 0.9)
pbinom(470,500, 0.9)
320*67
0.8/0.03
0.7059/0.02
0.7059/0.01
list.files()
?list.files()
27*6
1300/0.0725
32577+15756
18794-1651
gc()
?gc
500*490/2
source("https://bioconductor.org/biocLite.R")
biocLite("maftools")
require(maftools)
laml.maf = system.file('extdata', 'tcga_laml.maf.gz', package = 'maftools') #path to TCGA LAML MAF file
laml = read.maf(maf = laml.maf, clinicalData = laml.clin)
laml.maf
biocLite("maftools")
source("https://bioconductor.org/biocLite.R")
biocLite("maftools")
biocLite("maftools")
library(maftools)
150*149/2
550*549/2
source("https://bioconductor.org/biocLite.R")
biocLite("maftools")
require(maftools)
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
require(maftools)
source("https://bioconductor.org/biocLite.R")
install_github("PoisonAlien/maftools")
install.packages("install_github")
install.packages('devtools')
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools", dependencies = TRUE)
library(devtools)
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
require(maftools)
install_github(repo = "PoisonAlien/maftools")
?install_github
install_github(repo = "PoisonAlien/maftools", dependencies = TRUE)
install.packages("cometExactTest")
source("https://bioconductor.org/biocLite.R")
install.packages("cometExactTest")
biocLite("cometExactTest")
3*3/2
32*31/2
8+8*7/2
8+8*8/2
3+3*3/2
8+8 +8*7/2
163*162/2
13202-13*12/2
64*3
64*2
128/4
BiocManager::install("EmpiricalBrownsMethod", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EmpiricalBrownsMethod", version = "3.8")
82+38+32+23
175/4
-log(0.3)
-log(0.05)
-log(0.0001)
2^7
1/56
1/6
230+67+28+13+10+7+12
1404+771
log(17070)
log2(17070)
36+28+28+10+3+8
205+58+32+16+6+5+18
205+ 58+32+16+6+5+18
2000*1999/2
198/340
340-198
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("TCGAbiolinks")
biocLite("TCGAbiolinks")
biocLite("maftools")
library(TCGAbiolinks)
library(TCGAbiolinks)
install.packages("cmprsk")
install.packages('cmprsk')
devtools::install_github('BioinformaticsFMRP/TCGAbiolinks')
devtools::install_github('BioinformaticsFMRP/TCGAbiolinks')
install.packages("cmprsk")
13*480
91+35+39+39+86
446+62+64+53
library("devtools")
devtools::install_github("YosefLab/SymSim")
55+40.28+55+203.52+253.00+55+49.06+294+55+70+43.42+25+42.86+274
1515.14+1765.80
5048.17-2106.52
294+247
2220.80-1148+305
2220.90 -1148.67+9.76+305.72
55+30.14+1.43+110+55+51.9+55+9.64+70+55+30.92+189.99+36.35+7.75+7.32+1.43+31.88+50.72+55+1.43
3282-1800
55+40.28+55+203+253+55+49+294+55+70+43+25+42.8+274
198/317
95*0.8
375*1.1
477*1.2
477*1.1
113*0.8
66.3*0.8
777+384-103
103/1058
63+61+55
432+63+61
446/(446+64+62)
64/(446+64+62)
62/(446+64+62)
4.1*4.7
4.1/4.
4.1/4.7
135*0.87
141*0.95
120.29*0.95
120/3.75*4
log(5,2)
log(50,2)
log(500,2)
log(5000,2)
126/179
62/126
library('Seurat')
package_version(Seurat)
package_version('Seurat')
packageVersion('Seurat')
?install.packages
.libPaths()
.libPaths("~/anaconda/lib/R/library")
.libPaths()
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
library(remotes)
packageVersion(remotes)
packageVersion('remotes')
update_packages("remotes")
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
packageVersion('remotes')
install.packages('devtools')
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
detach('remotes')
detach("package:remotes", unload = T)
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
packageVersion(sessionInfo())
packageVersion(sessionInfo
)
packageVersion('sessionInfo')
update.packages('sessioninfo')
update.packages('sessionInfo')
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
detach("package:sessionInfo", unload = T)
detach("package:sessioninfo", unload = T)
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
detach("package:sessioninfo", unload = T)
source("https://z.umn.edu/archived-seurat")
install.packages("Seurat", repos = "https://satijalab.org/ran", type = type)
.libPaths()
.libPaths("/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
.libPaths()
source("https://z.umn.edu/archived-seurat")
detach("package:Seurat", unload = T)
source("https://z.umn.edu/archived-seurat")
install.packages("Seurat", repos = "https://satijalab.org/ran", type = type)
source("https://z.umn.edu/archived-seurat")
install.packages("Seurat", repos = "https://satijalab.org/ran", type = type)
devtools::install_version(package = 'Seurat', version = package_version('2.3.0'))
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat)
packageVersion('Seurat')
55/81
639/168 +1100/168
2/(808/168 +1300/168)
2/(808/250 +1300/250)
19/76
67/346
54/228
32/194
41/(41+162)
45/(45+260)
prop.test(c(112, 220), c(1066/2, 1066/2), p = NULL, alternative = "two.sided",
correct = TRUE)
112/1066
?prop.test
prop.test(112,533, p = NULL, alternative = "two.sided",
correct = TRUE)
prop.test(220,533, p = NULL, alternative = "two.sided",
correct = TRUE)
prop.test(c(49,39),c(254,254), p = NULL, alternative = "two.sided",
correct = TRUE)
?chisq.test
8.4/10.3
pnorm(3.157)
?pnorm
pnorm(6.22881869049588, 3.772908398407359, 0.7778537980117928)
pnorm(6.22881869049588, 3.772908398407359, 0.7778537980117928, lower.tail = F)
qnorm(0.975, 3.772908398407359, 0.7778537980117928)
qnorm(0.975, 3.772908398407359, 0.7778537980117928, lower.tail = F)
2**(5.297-1)
2**(5.297-1)/1066
2**(2.248-1)/1066
(2**2.248-1)/1066
(2**5.297-1)/1066
800*5
26+41+143+165
22 +41+143+165
0.05/371/242
library(grPregOverlap)
library(grpregOverlap)
install.packages(grpregOverlap)
install.packages("grpregOverlap")
install.packages("grpregOverlap")
install.packages("grpregOverlap")
devtools::install_github("YaohuiZeng/grpregOverlap")
devtools::install_github("YaohuiZeng/grpregOverlap")
library(grpregOverlap)
4925/176
4925*12
?wilcox.test
81 +55
(54+35)/(81+55)
library('Seurat')
?FindClusters.default
?FindNeighbors.default
1/15
4.78/5.10
81+81+47+33
81+33+77
fisher.test(matrix(11, 7, 2, 10))
fisher.test(matrix(c(11, 7, 2, 10), nrow=2)
)
fisher.test(matrix(c(9, 9, 2, 10), nrow=2)
)
fisher.test(matrix(c(9, 9, 2, 10), nrow=2, alternative='greater')
)
fisher.test(matrix(c(9, 9, 2, 10), nrow=2), alternative='greater')
fisher.test(matrix(c(9, 9, 2, 12), nrow=2), alternative='greater')
fisher.test(matrix(c(6, 3, 6, 1), nrow=2), alternative='greater')
fisher.test(matrix(c(6, 3, 1, 6), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 5, 1), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 2, 10), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 3, 13), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 2, 14), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 2, 14), nrow=2), alternative='greater')
fisher.test(matrix(c(9,9, 3, 13), nrow=2), alternative='greater')
fisher.test(matrix(c(6,3, 1, 7), nrow=2), alternative='greater')
data(bcellViper, package="bcellViper")
setwd("~/PycharmProjects/HiSig/speed")
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
data(bcellViper, package="bcellViper")
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
signature <- rowTtest(dset, "description", c("CB", "CC"), "N")
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))[, 1]
nullmodel <- ttestNull(dset, "description", c("CB", "CC"), "N", per = 1000, repos = TRUE, verbose = FALSE)
regulon
mrs <- msviper(signature, regulon, nullmodel, verbose = FALSE)
mrs
summary(mrs)
regulon[[1]]
names(regulon)
write.csv('tf.txt', regulon)
?writeLines
write.csv(regulon, 'tf.txt')
write.csv(names(regulon), 'tf.txt')
write.csv(names(regulon), 'tf.txt', row.names = F, col.names = F)
write.csv(names(regulon), 'tf.txt', row.names = F, col.names = F, quote = F)
write.table(names(regulon), 'tf.txt', row.names = F, col.names = F, quote = F)
regulon[[1]]
regulon[[1]]$tfmode
names(regulon[[1]]$tfmode)
length(regulon)
c(names(regulon[[1]]$tfmode), names(regulon[[1]]$tfmode))
unique(c(names(regulon[[1]]$tfmode), names(regulon[[1]]$tfmode)))
sort(unique(c(names(regulon[[1]]$tfmode), names(regulon[[1]]$tfmode))))
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
tf = names(regulon)
tf[[1]]
tf.index("AATF")
?where
?index
?find
which(tf, 'AATF')
match(tf, 'AATF')
match('AATF', tf)
rep.int(1,2)
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
conn
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
length(targets)
write.table(signature, 'signature.txt',row.names = F, col.names = F, quote = F)
source('~/PycharmProjects/HiSig/speed/viper.r', echo=TRUE)
data(bcellViper, package="bcellViper")
?glmnet
library(glmnet)
library(glmnet)
?glmnet
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
setwd("~/PycharmProjects/HiSig")
setwd("~/PycharmProjects/HiSig")
devtools::create("HiSig")
here::dr_here()
devtools::create("HiSig")
library(stats)
devtools::document()
setwd("~/PycharmProjects/HiSig")
devtools::document()
setwd("~/PycharmProjects/HiSig/HiSig")
devtools::document()
devtools::document()
?glmnet
setwd("~/PycharmProjects/HiSig/HiSig/examples")
