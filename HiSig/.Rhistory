df$Signal = signal1_sorted
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse='|'))
df$Signal.2 = signal2_sorted
}
# df %>% filter(Selection.pressure > 0)
# df %>% arrange(q.value, p.value, -Selection.pressure)
return(df)
}
parse_hisig(data, impact, terms, genes)
df <-parse_hisig(data, impact, terms, genes)
df$Genes
df$pval
df$p.value
as.vector(genesets_sorted)
as.vector(genesets_sorted2)
paste(genesets_sorted[[1]][1:20], collapse = '|')
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = '|'))
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:10], collapse = '|'))
cgenesets_sorted
genesets_sorted
as.dataframe(genesets_sorted)
as.data.frame(genesets_sorted)
genesets_sorted
as.character(genesets_sorted)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
df <-parse_hisig(data, impact, terms, genes)
parse_hisig <- function(data, impact, term.names, gene.names, signal2=NA, gene.as.term=F, showedge=20) {
ngenes = length(gene.names)
nterms = length(term.names)
stopifnot(ngenes==length(data$response))
term.sizes = colSums(data$design)
# calculate p.values
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
pval <- rowSums(impact.rand > impact.main)/dim(impact)[1]
qval = p.adjust(pval, method='BH')
df = cbind(impact.main, pval, qval)
if (gene.as.term) {
df = df[(ngenes+1):dim(impact)[2], ]
}
df = cbind(term.names, df)
nsys = dim(df)[1]
names(df) == c("System.names", "Selection.pressure", "p.value", "q.value")
# list the genes in the systems
allranks = rank(abs(data$response), ties.method = 'max')
if (gene.as.term) {
genesets = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], gene.names)
generanks = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], allranks)
signal1 = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], data$response)
}
else {
genesets = lapply(1:nsys, getterminfo, data$design, gene.names)
generanks = lapply(1:nsys, getterminfo, data$design, allranks)
signal1 = lapply(1:nsys, getterminfo, data$design, data$response)
}
gene_sort_ids = lapply(signal1, function(x) order(abs(x), decreasing=T)) # all sorted by signal1
genesets_sorted = lapply(1:nsys, function(x) genesets[[x]][gene_sort_ids[[x]]] )
generanks_sorted = lapply(1:nsys, function(x) generanks[[x]][gene_sort_ids[[x]]] )
signal1_sorted = lapply(1:nsys, function(x) signal1[[x]][gene_sort_ids[[x]]] )
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = '|'))
generanks_sorted = lapply(generanks_sorted, function(x) paste(x[1:showedge], collapse = '|'))
signal1_sorted = lapply(signal1_sorted, function(x) paste(x[1:showedge], collapse='|'))
df$Genes = as.character(genesets_sorted)
df$Gene.ranks = as.character(generanks_sorted)
df$Signal = as.character(signal1_sorted)
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse='|'))
df$Signal.2 = as.character(signal2_sorted)
}
# df %>% filter(Selection.pressure > 0)
# df %>% arrange(q.value, p.value, -Selection.pressure)
return(df)
}
parse_hisig <- function(data, impact, term.names, gene.names, signal2=NA, gene.as.term=F, showedge=20) {
ngenes = length(gene.names)
nterms = length(term.names)
stopifnot(ngenes==length(data$response))
term.sizes = colSums(data$design)
# calculate p.values
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
pval <- rowSums(impact.rand > impact.main)/dim(impact)[1]
qval = p.adjust(pval, method='BH')
df = cbind(impact.main, pval, qval)
if (gene.as.term) {
df = df[(ngenes+1):dim(impact)[2], ]
}
df = cbind(term.names, df)
nsys = dim(df)[1]
names(df) == c("System.names", "Selection.pressure", "p.value", "q.value")
# list the genes in the systems
allranks = rank(abs(data$response), ties.method = 'max')
if (gene.as.term) {
genesets = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], gene.names)
generanks = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], allranks)
signal1 = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], data$response)
}
else {
genesets = lapply(1:nsys, getterminfo, data$design, gene.names)
generanks = lapply(1:nsys, getterminfo, data$design, allranks)
signal1 = lapply(1:nsys, getterminfo, data$design, data$response)
}
gene_sort_ids = lapply(signal1, function(x) order(abs(x), decreasing=T)) # all sorted by signal1
genesets_sorted = lapply(1:nsys, function(x) genesets[[x]][gene_sort_ids[[x]]] )
generanks_sorted = lapply(1:nsys, function(x) generanks[[x]][gene_sort_ids[[x]]] )
signal1_sorted = lapply(1:nsys, function(x) signal1[[x]][gene_sort_ids[[x]]] )
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = '|'))
generanks_sorted = lapply(generanks_sorted, function(x) paste(x[1:showedge], collapse = '|'))
signal1_sorted = lapply(signal1_sorted, function(x) paste(x[1:showedge], collapse='|'))
print(dim(df))
df$Genes = as.character(genesets_sorted)
df$Gene.ranks = as.character(generanks_sorted)
df$Signal = as.character(signal1_sorted)
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse='|'))
df$Signal.2 = as.character(signal2_sorted)
}
# df %>% filter(Selection.pressure > 0)
# df %>% arrange(q.value, p.value, -Selection.pressure)
return(df)
}
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
View(df)
genesets_sorted  = genesets_sorted[1:621,]
genesets_sorted  = genesets_sorted[1:621]
df$Genes = genesets_sorted
genesets_sorted
df <-parse_hisig(data, impact, terms, genes)
View(genesets_sorted)
genesets_sorted = as.character(genesets_sorted)
df$Genes = genesets_sorted
df <-parse_hisig(data, impact, terms, genes)
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = ';'))
genesets_sorted = lapply(genesets_sorted, function(x) paste(x[1:20], collapse = ';'))
genesets_sorted = lapply(genesets, function(x) paste(x[1:20], collapse = ';'))
genesets_sorted = lapply(genesets, function(x) paste(x[1:20], collapse = ';'))[1:621]
genesets_sorted = as.character(geneset_sorted)
genesets_sorted = as.character(genesets_sorted)
df2 =df
df2$Genes = genesets_sorted
cbind(df, genesets_sorted)
names(genesets_sorted)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
View(df)
cbind(df, genesets_sorted)
df2 = cbind(df, genesets_sorted)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
print(genesets_sorted)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
df <-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df <-parse_hisig(data, impact, terms, genes)
genes = readLines('target.txt')
terms = readLines('tf.txt')
xfname <- 'viper-conn.txt'
yfnam <- 'signature.txt'
data <- load_data(xfname, yfame)
yfname <- 'signature.txt'
data <- load_data(xfname, yfame)
data <- load_data(xfname, yfname)
beta_max = hisig_fit(data)
source('~/PycharmProjects/HiSig/HiSig/R/model.R', echo=TRUE)
beta_max = hisig_fit(data)
beta_max = hisig_fit(data)
dim(data$design)
source('~/PycharmProjects/HiSig/HiSig/R/model.R', echo=TRUE)
data <- load_data(xfname, yfname)
beta_max = hisig_fit(data)
out = hisig_fit(data)
beta_max = out$beta.max
lambda = out$lambda
beta_max_combined <- hisig_fit_rand(data, lambda)
impact <- cbind(beta_max, beta_max_combined)
parse_hisig(data, impact, terms, genes)
df<-parse_hisig(data, impact, terms, genes)
as.data.frame(df)
df<-as.data.frame(df)
library(dplyr)
df %>% filter(Selection.pressure > 0)
df %>% arrange(q.value, p.value, -Selection.pressure)
names(df)
arrange(df, q.value, p.value, -Selection.pressure)
install.packages(dplyr)
library(dplyr)
install.packages("tidyverse")
arrange(df, q.value, p.value, -Selection.pressure)
df %>% arrange(q.value, p.value, -Selection.pressure)
df %>% arrange(q.value)
df$x =1
df<-cbind(df, 1)
df %>% x ==1
df %>% filter(x ==1)
df$pval = as.numeric(df$pval)
df %>% arrange(pval)
parse_hisig <- function(data, impact, term.names, gene.names, signal2=NA, gene.as.term=F, showedge=20) {
ngenes = length(gene.names)
nterms = length(term.names)
stopifnot(ngenes==length(data$response))
term.sizes = colSums(data$design)
# calculate p.values
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
pval <- rowSums(impact.rand > impact.main)/dim(impact)[1]
qval = p.adjust(pval, method='BH')
df = cbind(impact.main, pval, qval)
if (gene.as.term) {
df = df[(ngenes+1):dim(impact)[2], ]
}
df = cbind(term.names, term.sizes, df)
nsys = dim(df)[1]
names(df) == c("System.names", "System.sizes", "Selection.pressure", "p.value", "q.value")
# list the genes in the systems
allranks = rank(abs(data$response), ties.method = 'max')
if (gene.as.term) {
genesets = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], gene.names)
generanks = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], allranks)
signal1 = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], data$response)
}
else {
genesets = lapply(1:nsys, getterminfo, data$design, gene.names)
generanks = lapply(1:nsys, getterminfo, data$design, allranks)
signal1 = lapply(1:nsys, getterminfo, data$design, data$response)
}
gene_sort_ids = lapply(signal1, function(x) order(abs(x), decreasing=T)) # all sorted by signal1
genesets_sorted = lapply(1:nsys, function(x) genesets[[x]][gene_sort_ids[[x]]] )
generanks_sorted = lapply(1:nsys, function(x) generanks[[x]][gene_sort_ids[[x]]] )
signal1_sorted = lapply(1:nsys, function(x) signal1[[x]][gene_sort_ids[[x]]] )
genesets_sorted = as.character(lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = ';')))
names(genesets_sorted) = 'Genes'
generanks_sorted = as.character(lapply(generanks_sorted, function(x) paste(x[1:showedge], collapse = ';')))
names(generanks_sorted) = 'Gene.ranks'
signal1_sorted = as.character(lapply(signal1_sorted, function(x) paste(x[1:showedge], collapse=';')))
names(signal1_sorted) = 'Signal'
df = cbind(df, genesets_sorted)
df = cbind(df, generanks_sorted)
df = cbind(df, signal1_sorted)
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = as.character(lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse=';')))
names(signal2_sorted) = 'Signal.2'
df = cbind(df, signal2_sorted)
}
df = as.data.frame(df)
df %>% filter(Selection.pressure > 0)
df %>% arrange(q.value, p.value, -Selection.pressure)
return(df)
}
df<-parse_hisig(data, impact, terms, genes)
rm(df)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
View(df)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
View(df)
parse_hisig <- function(data, impact, term.names, gene.names, signal2=NA, gene.as.term=F, showedge=20) {
ngenes = length(gene.names)
nterms = length(term.names)
stopifnot(ngenes==length(data$response))
term.sizes = colSums(data$design)
# calculate p.values
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
pval <- rowSums(impact.rand > impact.main)/dim(impact)[1]
qval = p.adjust(pval, method='BH')
df = cbind(impact.main, pval, qval)
if (gene.as.term) {
df = df[(ngenes+1):dim(impact)[2], ]
}
df = cbind(term.names, term.sizes, df)
nsys = dim(df)[1]
names(df) == c("System.names", "System.sizes", "Selection.pressure", "p", "q")
df = as.data.frame(df)
return(df)
# list the genes in the systems
allranks = rank(abs(data$response), ties.method = 'max')
if (gene.as.term) {
genesets = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], gene.names)
generanks = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], allranks)
signal1 = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], data$response)
}
else {
genesets = lapply(1:nsys, getterminfo, data$design, gene.names)
generanks = lapply(1:nsys, getterminfo, data$design, allranks)
signal1 = lapply(1:nsys, getterminfo, data$design, data$response)
}
gene_sort_ids = lapply(signal1, function(x) order(abs(x), decreasing=T)) # all sorted by signal1
genesets_sorted = lapply(1:nsys, function(x) genesets[[x]][gene_sort_ids[[x]]] )
generanks_sorted = lapply(1:nsys, function(x) generanks[[x]][gene_sort_ids[[x]]] )
signal1_sorted = lapply(1:nsys, function(x) signal1[[x]][gene_sort_ids[[x]]] )
genesets_sorted = as.character(lapply(genesets_sorted, function(x) paste(x[1:showedge], collapse = ';')))
names(genesets_sorted) = 'Genes'
generanks_sorted = as.character(lapply(generanks_sorted, function(x) paste(x[1:showedge], collapse = ';')))
names(generanks_sorted) = 'Gene.ranks'
signal1_sorted = as.character(lapply(signal1_sorted, function(x) paste(x[1:showedge], collapse=';')))
names(signal1_sorted) = 'Signal'
df = cbind(df, genesets_sorted)
df = cbind(df, generanks_sorted)
df = cbind(df, signal1_sorted)
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = as.character(lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse=';')))
names(signal2_sorted) = 'Signal.2'
df = cbind(df, signal2_sorted)
}
df = as.data.frame(df)
df %>% filter(Selection.pressure > 0)
df %>% arrange(q.value, p.value, -Selection.pressure)
return(df)
}
df<-parse_hisig(data, impact, terms, genes)
names(df)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
names(df) == c("System.names", "System.sizes", "Selection.pressure", "p", "q")
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
round(df, 3)
df$p = rouund(df$p, 3)
df$p = round(df$p, 3)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
data$response = round(data$response, 3)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
df
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
"Signal" %in% names(df)
output <- function(df) {
colorder= c("System.names", "System.sizes", "Selection.pressure", "p", "q", "Genes", "Gene.ranks", "Signal")
if ("Signal.2" %in% names(df) ) {
colorder = c(colorder, "Signal.2")
}
write.table(df[,colorder], quote=F, row.names = F, sep="\t")
}
output(df)
output <- function(df, out) {
colorder= c("System.names", "System.sizes", "Selection.pressure", "p", "q", "Genes", "Gene.ranks", "Signal")
if ("Signal.2" %in% names(df) ) {
colorder = c(colorder, "Signal.2")
}
write.table(out, df[,colorder], quote=F, row.names = F, sep="\t")
}
output(df, 'test.out')
?write.table
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
?write.table
output(df, 'test.out')
output(format(df, digits=3), 'test.out')
?rank
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df<-parse_hisig(data, impact, terms, genes)
output(format(df, digits=3), 'test.out')
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
output(format(df, digits=3), 'test.out')
df<-parse_hisig(data, impact, terms, genes)
output(format(df, digits=3), 'test.out')
?glmnet
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
setwd("~/PycharmProjects/HiSig/HiSig/examples")
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
?format
format(df, digits=2)
format(df, digits=2)$p
df$p
round(df$p,2)
round(df, 6)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
df$p
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
df$p
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
rowSums(impact.rand > impact.main)/(dim(impact)[2]-1)
sort(rowSums(impact.rand > impact.main)/(dim(impact)[2]-1))
df$q
?p.adjust
pval
pval <- rowSums(impact.rand > impact.main)/(dim(impact)[2]-1)
pval
qval = p.adjust(pval, method='BH')
qval
sort(pval)
qval$V301
qval[301]
qval[302]
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
df %>% arrange(q, p, desc(Selection.pressure))
df$p
df<- df %>% arrange(q, p, desc(Selection.pressure))
df$q
?p.adjust
p.adjust(df$p, 'BH')
p.adjust(df$p, 'Holm')
p.adjust(df$p, 'holm')
p.adjust(df$p, 'fdr')
df$p
df$p[[1]]
df$p[[1]] = 0.0001
p.adjust(df$p, 'fdr')
0.8427/621
df$System.names
df[559,]
df[1,]
df[2,]
df[3,]
df %>% filter(System.names == 'TCG3')
df %>% filter(System.names == 'TCF3')
df %>% filter(System.names == 'BCL6')
df$System.names
head(df$System.names)
head(df$System.names)[1:20]
v<-head(df$System.names)
v(~is.na(v[1:20]))
v[~is.na(v[1:20])]
v[is.na(v[1:20])]
v[is.na(v[1:20])==F]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
v[not.na(v[1:20])]
v[-is.na(v[1:20])]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
v
v[1:20]
v1 = v[1:20]
v1[-is.na(v1)]
v1[is.na(v1)]
v1
is.na(v1)
-is.na(v1)
v1[-is.na(v1)]
v1[is.na(v1)==F]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
devtools::document()
devtools::document()
?devtools::install_github
devtools::install_github('fanzheng10/HiSig')
devtools::install_github('fanzheng10/HiSig/HiSig')
devtools::install_github('fanzheng10/HiSig/HiSig')
devtools::install_github('fanzheng10/HiSig/tree/master/HiSig')
devtools::install_github('fanzheng10/HiSig', subdir='HiSig')
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
devtools::install_github("fanzheng10/HiSig/HiSig", subdir="HiSig")
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
