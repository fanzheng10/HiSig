df$System.names
df[559,]
df[1,]
df[2,]
df[3,]
df %>% filter(System.names == 'TCG3')
df %>% filter(System.names == 'TCF3')
df %>% filter(System.names == 'BCL6')
df$System.names
head(df$System.names)
head(df$System.names)[1:20]
v<-head(df$System.names)
v(~is.na(v[1:20]))
v[~is.na(v[1:20])]
v[is.na(v[1:20])]
v[is.na(v[1:20])==F]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
v[not.na(v[1:20])]
v[-is.na(v[1:20])]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
v
v[1:20]
v1 = v[1:20]
v1[-is.na(v1)]
v1[is.na(v1)]
v1
is.na(v1)
-is.na(v1)
v1[-is.na(v1)]
v1[is.na(v1)==F]
source('~/PycharmProjects/HiSig/HiSig/R/parse.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/main.R', echo=TRUE)
devtools::document()
devtools::document()
?devtools::install_github
devtools::install_github('fanzheng10/HiSig')
devtools::install_github('fanzheng10/HiSig/HiSig')
devtools::install_github('fanzheng10/HiSig/HiSig')
devtools::install_github('fanzheng10/HiSig/tree/master/HiSig')
devtools::install_github('fanzheng10/HiSig', subdir='HiSig')
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
devtools::install_github("fanzheng10/HiSig/HiSig", subdir="HiSig")
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
library(HiSig)
?parse_hisig
?laod_data
library(HiSig)
?laod_data
?load_data
?hisig_fit
?parse_hisig
?sparseMatrix
library(Matrix)
?sparseMatrix
?load_data
?sparseMatrix
genes = readLines('target.txt')
setwd("~/PycharmProjects/HiSig/HiSig/examples")
genes = readLines('target.txt')
terms = readLines('tf.txt')
data <- load_data('conn.txt', 'response.txt', genes, terms)
data <- load_data('conn.txt', 'response.txt', genes=genes, terms=terms)
#' genes and gene sets, respectively. If the element at (i, j) is 1, then the
#' i-th gene is a member of the j-th gene set
#' @param xfname A two column numerical file representing a sparse matrix. The
#'   1st/2nd dimension encodes the rows/columns of the binary design matrix.
#' @param yfname A numerical file containing the observed signal (response
#'   variable) for genes.
#' @param genes A vector of genes
#' @param terms A vector of gene sets
#' @return A list containing the `design` and `response` fields.
#' @export
load_data <- function(xfname, yfname, genes, terms, index1=T) {
X <- as.matrix(read.table(xfname, header=F))
if (index1==F) {
X_sp = sparseMatrix(X[,1], X[,2], index1 = F, dims=c(length(genes), length(terms)))
}
else {
X_sp = sparseMatrix(X[,1], X[,2], index1 = T, dims=c(length(genes), length(terms)))
}
realy <- as.matrix(read.table(yfname, header=F))
data <-list("design"=X_sp, "response"=realy, "genes"=genes, "terms"=terms)
return(data)
}
data <- load_data('conn.txt', 'response.txt', genes=genes, terms=terms)
data$genes
devtools::document()
devtools::document()
?load_data
?load_data
devtools::document()
?load_data
paste0('x', '.txt')
install.packages("argparse")
?add_argument
library('argparser')
library('argparse')
?add_argument
?ArgumentParser
sessionInfo()
sessionInfo()
sessionInfo()
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
library(HiSig)
?colSums
#'
#' @param data A named list containing `design` and `response`.
#' @param impact The impact matrix; 1st column being the main fit; 2nd column to the end being the null model.
#' @param term.names a vector of term (gene set) names
#' @param gene.names a vector of gene names
#' @param signal2 if not NA, will print a second numerical information for gene sets. Default is NA.
#' @param gene.as.term if the design matrix sees individual gene as a gene set, set it to TRUE to correctly compute statistics. Default is FALSE.
#' @param showedge the number of top genes to print when the gene sets are big
#' @return A dataframe, sorted by q values.
#' @export
parse_hisig <- function(data, impact, term.names, gene.names, signal2=NA, gene.as.term=F, showedge=20) {
data$response = round(data$response, 2)
ngenes = length(gene.names)
nterms = length(term.names)
stopifnot(ngenes==length(data$response))
print(dim(data$design))
term.sizes = colSums(data$design)
# calculate p.values
impact.main = impact[,1]
impact.rand = impact[,2:dim(impact)[2]]
pval <- rowSums(impact.rand > impact.main)/(dim(impact)[2]-1)
qval = p.adjust(pval, method='BH')
df = cbind(impact.main, pval, qval)
df = round(df, 4)
df = as.data.frame(df)
names(df) = c("Selection.pressure", "p", "q")
if (gene.as.term) {
df = df[(ngenes+1):dim(impact)[1], ]
}
df$System.names = term.names
df$No.genes = term.sizes
nsys = dim(df)[1]
# list the genes in the systems
allranks = rank(-abs(data$response), ties.method = 'max')
if (gene.as.term) {
genesets = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], gene.names)
generanks = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], allranks)
signal1 = lapply(1:nsys, getterminfo, data$design[,(ngenes+1):dim(impact)[1]], data$response)
}
else {
genesets = lapply(1:nsys, getterminfo, data$design, gene.names)
generanks = lapply(1:nsys, getterminfo, data$design, allranks)
signal1 = lapply(1:nsys, getterminfo, data$design, data$response)
}
gene_sort_ids = lapply(signal1, function(x) order(abs(x), decreasing=T)) # all sorted by signal1
genesets_sorted = lapply(1:nsys, function(x) genesets[[x]][gene_sort_ids[[x]]] )
generanks_sorted = lapply(1:nsys, function(x) generanks[[x]][gene_sort_ids[[x]]] )
signal1_sorted = lapply(1:nsys, function(x) signal1[[x]][gene_sort_ids[[x]]] )
genesets_sorted = as.character(lapply(genesets_sorted, function(x) paste(x[1:showedge][is.na(x[1:showedge])==F], collapse = '|')))
generanks_sorted = as.character(lapply(generanks_sorted, function(x) paste(x[1:showedge][is.na(x[1:showedge])==F], collapse = '|')))
signal1_sorted = as.character(lapply(signal1_sorted, function(x) paste(x[1:showedge][is.na(x[1:showedge])==F], collapse='|')))
df$Genes = genesets_sorted
df$Gene.ranks = generanks_sorted
df$Signal = signal1_sorted
if (is.na(signal2) ==F) {
stopifnot(ngenes=length(signal2))
if (gene.as.term) {
signal2 = lapply(1:nsys, getterminfo, data = data$design[,(ngenes+1):dim(impact)[1]], array=signal2)
}
else {
signal2 = lapply(1:nsys, getterminfo, data = data$design, array = signal2)
}
signal2_sorted = lapply(1:nsys, function(x) signal2[[x]][gene_sort_ids[[x]]] )
signal2_sorted = as.character(lapply(signal2_sorted, function(x) paste(x[1:showedge], collapse='|')))
df$Signal.2 = signal2_sorted
}
df <- df %>% filter(Selection.pressure > 0)
df <- df %>% arrange(q, p, desc(Selection.pressure))
return(df)
}
library(HiSig)
library(HiSig)
setwd("~/PycharmProjects/HiSig/HiSig/examples")
data <- load_data('conn.txt', 'response.txt', 'target.txt', 'tf.txt')
library(HiSig)
data <- load_data('conn.txt', 'response.txt', readLines('target.txt'), readLines('tf.txt'))
colSums(data$design)
hisig_out <- hisig_fit(data, nlambda=50)
beta_max_rand <- hisig_fit_rand(data, hisig_out$lambda, batch=100)
impact <- cbind(hisig_out$beta.max, beta_max_rand)
df <- parse_hisig(data, impact, term.names = terms, gene.names = genes)
df <- parse_hisig(data, impact, term.names = readLines('response.txt'), gene.names = readLines('target.txt'))
df <- parse_hisig(data, impact, term.names = readLines('response.txt'), gene.names = readLines('target.txt'))
df <- parse_hisig(data, impact, term.names = readLines('tf.txt'), gene.names = readLines('target.txt'))
?colSums
base::colSums(data$design)
Matrix::colSums(data$design)
library(HiSig)
?load_data
getwd()
setwd("~/")
?load_data
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
?load_data
library(HiSig)
?load_data
?hisig_fit
library(HiSig)
?hisig_fit
setwd("~/PycharmProjects/HiSig/HiSig")
library(HiSig)
?hisig_fit
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
devtools::document()
?hisig_fit
?hisig_fit
library(HiSig)
?hisig_fit
setwd("~/")
?hisig_fit
?load_data
devtools::install_github("fanzheng10/HiSig", subdir="HiSig")
?load_data
setwd("~/Desktop/UCSD_Research/2020_1st/single_cell")
source("https://z.umn.edu/archived-seurat")
library(Seurat)
install.packages('Seurat')
?UpgradeSeuratObject
library(Seurat)
?UpgradeSeuratObject
?UpdateSeuratObject
load('FACS_all.Robj')
update_FACS <- UpdateSeuratObject(object=tiss_FACS)
update_FACS@graphs
update_FACS@neighbors
save(update_FACS, file='FACS_all_v3.Robj')
update_FACS = FindNeighbors(update_FACS, dims=1:20)
View(update_FACS)
update_FACS@graphs$RNA_snn
g<-update_FACS@graphs$RNA_snn
library(Matrix)
as.dgCMatrix(g)
as.matrix(g)
gsp = as.sparse(g)
?writeMM
?writeMM(gsp, 'test.mtx')
writeMM(gsp, 'test.mtx')
max(gsp@i)
max(gsp@p)
View(gsp)
class?dgCMatrix
?FindNeighbors
library(itertools)
pc = c(10,20,30,40)
k = c(10,20,30,40)
product(pc, k)
product(a=pc, b=k)
ihasnext(product(a=pc, b=k))
ihasNext(product(a=pc, b=k))
while(ihasNext())
it <-ihasNext(product(pc, k))
it
while(hasNext(it)) {}
while(hasNext(it)) {}
while(hasNext(it)) {x<-nextElem(it); print(x)}
while(hasNext(it)) {x<-nextElem(it); print(x$pc, x$k)}
it <-ihasNext(product(pc, k))
while(hasNext(it)) {x<-nextElem(it); print(x$pc, x$k)}
x
while(hasNext(it)) {x<-nextElem(it); print(c(x$pc, x$k))}
it <-ihasNext(product(pc, k))
while(hasNext(it)) {x<-nextElem(it); print(c(x$pc, x$k))}
x$pc
it <-ihasNext(product(pc=pc, k=k))
while(hasNext(it)) {x<-nextElem(it); print(c(x$pc, x$k))}
paste0(10, 1/2)
paste0(as.chatacter(10), as.character(1/2))
paste0(as.character(10), as.character(1/2))
as.character(1/2)
?paste
as.character(1/3)
as.character(1/15)
as.character(1/15)[1:3]
format(as.character(1/15), "%.2f")
?format
format(as.character(1/15), digits=2)
format(1/15, digits=2)
"A" +"mtx"
source('~/PycharmProjects/HiSig/HiSig/R/varying_snn_matrix.R', echo=TRUE)
?FindNeighbors
?sparseMatrix
setwd("~/Desktop/UCSD_Research/2020_2nd/hisig_paper/test")
library(devtools)
devtools::build()
results <- read.delim('gsea_results.txt')
setwd("~/Desktop/UCSD_Research/2021/hisig_paper/N3_m5_p0.3_1")
results <- read.delim('gsea_results.txt')
pos = readLines('selected_terms.txt')
results[results$V1 %in% pos,]
results[results$V1 %in% pos,]$pos= 1
View(results)
results$pos = 0
results[results$V1 %in% pos]$pos= 1
results[results$V1 %in% pos,]$pos= 1
library(pROC)
roc(results$pos ~ results$p,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
?par
hisig <- read.delim('sim_ms_impact_summary.tsv')
results$hisig_p = 1
results[hisig$System_name,]
results[results$V1 %in% hisig$System_name,]
order(hisig)
?order
hisig <- hisig[order(hisig$p),]
hisig <- hisig[order(hisig$System_name),]
results[results$V1 %in% hisig$System_name,]$hisig_p = hisig$p
roc(results$pos ~ results$hisig_p,plot=TRUE,print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE,add=T)
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
fit$beta
fit$beta[,which(cvfit$lambda == cvfit$lambda.min)]
var
var <- which(fit$beta[,which(cvfit$lambda == cvfit$lambda.min)]>0)
var
fit$beta[,which(cvfit$lambda == cvfit$lambda.min)][var]
var <- as.vector(var[var-length(realy)>0])
var
fit$beta[,which(cvfit$lambda == cvfit$lambda.min)][var]
terms$coef = 0
terms[var]$coef =  fit$beta[,which(cvfit$lambda == cvfit$lambda.min)][var]
terms[var,]$coef =  fit$beta[,which(cvfit$lambda == cvfit$lambda.min)][var]
var
terms = read.table('terms.txt')
terms$coef = 0
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
write.table(terms, 'normal_lasso_w_identity.txt', quote=F, sep='\t')
terms$coef = format(terms$coef, 5)
write.table(terms, 'normal_lasso_w_identity.txt', quote=F, sep='\t')
?format
terms$coef = format(terms$coef, digits=5)
write.table(terms, 'normal_lasso_w_identity.txt', quote=F, sep='\t')
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
lasso = read.delim('normal_lasso_w_identity.txt')
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
X
X[-1]
X[,-1]
dim(X)
X[2500,]
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
X[,2]
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
source('~/PycharmProjects/HiSig/R/normalLasso.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/R/plot_auc.R', echo=TRUE)
library(HiSig)
setwd("~/PycharmProjects/HiSig/HiSig/examples/simulation")
setwd("~/Desktop/UCSD_Research/2021/hisig_paper/N3_m5_p0.3_1")
coef = read.delim('sim_ms_impact.coef')
coef
coef = read.table('sim_ms_impact.coef')
View(coef)
coef = read.table('sim_ms_impact.coef',quote=T)
coef = as.matrix(coef)
sum(coef,1)
sum(coef)
coef
coef[,1]
sum(coef,1)
?sum
colSums(coef)
colSums(coef) > 0
which(colSums(coef) > 0)
coef = coef[,which(colSums(coef)>0)]
norm_coef = scale(coef, center=FALSE, scale=colSums(coef))
625+155
gene_features = colSums(coef[1:625,])
gene_features
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
gene_features
L1_features
L3_features
as.vector(L3_features)
gene_features
lambdas = coef[1,2:dim(coef)[2]]
cbind(gene_features, lambdas)
cbind(as.vector(gene_features), lambdas)
cbind(as.vector(gene_features), lambdas)
gene_features = colSums(coef[1:625,])
L3_features = colSums(coef[626:630,])
L2_features = colSums(coef[631:655,])
L1_features = colSums(coef[656:780,])
cbind(as.vector(gene_features), lambdas)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
coef
nrows(coef)
nrow(coef)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
which(colSums(coef)>0)
coef
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
coef = read.table('sim_ms_impact.coef', header = F, quote = F)
coef = read.table('sim_ms_impact.coef', header = F)
lambdas = coef[1,]
View(lasso)
coef[1,]
coef = as.matrix(coef[2:nrow(coef),])
dim(coef)
length(lambdas)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
dim(coef)
colSums(coef)
View(coef)
coef = read.table('sim_ms_impact.coef', header = F, row.names = T)
coef = read.table('sim_ms_impact.coef', header = F, row.names = 1)
View(coef)
View(coef)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
gene_features
cbind(lambdas, gene_features)
cbind(as.vector(lambdas), as.vector(gene_features))
data.frame(lambdas, gene_features)
data.frame(as.vector(lambdas), gene_features)
data.frame(as.vector(lambdas), as.vector(gene_features))
gene_features
as.vector(gene_features)
data.frame(as.vector(gene_features))
data.frame(as.integer(gene_features))
data.frame(as.numeric(gene_features))
data.frame(as.numeric(gene_features), as.numeric(lambdas))
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
rbind(df_L1,df_L2)
rbind(c(df_L1,df_L2))
?data.frame
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
rbind(df_gene, df_L1)
df_gene = data.frame(features=gene_features, lambdas)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
rbind(df_gene, df_L1)
rbind(df_gene, df_L1, df_L2)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
p
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
ggsave('../HiSig_vignette/simulation/fig/relative_contribution.pdf', p, device='pdf', width=7.5, height=4)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
ggsave('../HiSig_vignette/simulation/fig/relative_contribution.pdf', p, device='pdf', width=6.5, height=4)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/PycharmProjects/HiSig/HiSig/examples/simulation/plot_profile.R', echo=TRUE)
source('~/Desktop/UCSD_Research/2021/hisig_paper/HiSig_vignette/simulation/fig1.r', echo=TRUE)
library(fabricatr)
library(optparse)
#local test
nlayers = 3
M = rep(2, nlayers)
layer_names = paste0('L', 1:nlayers)
p = 0.2
hier_data <-
fabricate(
L = add_level(
N = M[[1]],
select = draw_binary(prob=p, N=N)
# weight = rpois(N, 1) * select,
# sum_weight = weight
)
)
names(hier_data)[names(hier_data) == 'L'] <- 'L1'
names(hier_data)[names(hier_data) == 'select'] <- 'L1.select'
for (x in 2:nlayers) {
hier_data <-
fabricate(
data = hier_data,
L = add_level(
N = M[[x]],
select = draw_binary(prob=p, N=N) # make new selection
)
)
names(hier_data)[names(hier_data) == 'L'] <- paste0('L', x)
names(hier_data)[names(hier_data) == 'select'] <- paste0('L', x,'.select')
# names(hier_data)[names(hier_data) == 'weight'] <-paste0('L', x, '.weight')
}
# add weights to selected
hier_data$weight = 0
N = nrow(hier_data)
cols = 'L3.select'
rpois(N, 1)* hier_data[[cols]]
rpois(N, 1)
?rnorm
36+28+28
92+8+3+10
7776/36
36*6
35*6
32270.3 + 34886.8
?p.adjust
